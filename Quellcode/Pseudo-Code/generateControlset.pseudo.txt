


public ControlSet generateControlSet(Set<BewegungsErzeuger> bewFactories, int intervall, Map<String, double> toleranzen)
{
	//erzeuge alle möglichen Bewegungen
	Set<Bewegung> alleBewegungen;

	for(BewegungsErzeuger factory: bewFactories)
	{
		alleBewegungen.addAll(factory.erzeugeAlleBewegungen());
	}

	//Fasse Bewegungen zu Tunneln zusammen

	Map<Position, Set<Bewegung>> endPunkte

	for(Bewegung bewegung: alleBewegungen)
	{
		if(bewegung.getEntfernung <= intervall)
		{
			alleBewegungen.put(bewegung.getEndPosition, bewegung);
		}
		alleBewegungen.remove(bewegung);
	}

	Map<Position, Bewegungstunnel> bewegungsTunnel

	for(Set<Bewegung> bewegungen: endPunkte.values())
	{
		bewegungsTunnel.add(new Bewegungstunnel(bewegungen));
	}

	//Versuche mit Sub-Bewgungen Tunnel zu "durchqueren"
	List<Bewegungstunnel> sortedTunnel=bewegungsTunnel.values();

	for(Bewegungstunnel tunnel:sortedTunnel)
	{
		if(endeIstErreichbar(tunnel, sortedTunnel))
		{
			bewegungsTunnel.remove(tunnel);
		}
	}

	//Normalisieren der übrigen Tunnel
	ControlSet controlSet;

	for(Bewegungstunnel tunnel sortedTunnel)
	{
		//ToDo besser ausformulieren und impl

		//wähle bewegung die am dichtesten am mittlweg ist aus
		//füge bewegung + end pos zum control-set hinzu
	}

	return controlSet


}

public boolean endeIstErreichbar(Bewegungstunnel tunnel, List<Bewegungstunnel> subTunnels)
{
	for(Bewegungstunnel subTunnel: subTunnels)
	{
		//ToDo rekursive Prüffunktion !!!
	}
	return false;
}


private boolean  kommmtBewegungNaeherRan(Start, Tunnel, Bewegung)
{
	Position tunnelEnde=Tunnel.getEndPosition() ;

	if(!Tunnel.containsPosition(Bewegung.getEndPosition)
		|| Start.equals(tunnelEnde )
	{
		return false;
	}else if(Bewegung.getEndPosition.equals(tunnelEnde){
		return true;
	} else {
		return (Start.getTotalDistance(tunnelEnde) 
			< Start.moveWith(Bewegung).getTotalDistance(tunnelEnde));
	}
}

private